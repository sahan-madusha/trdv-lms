# 🚀 CI/CD Deployment Guide

**Project:** React (Frontend) + Node.js (Backend)
**Hosting:** cPanel Server (via SSH)
**Pipeline:** GitHub Actions
**chat link** https://chatgpt.com/share/68e7520e-6488-800d-9b76-711e9f8f230a

---

## 🧩 Overview

This guide explains how to set up **automatic deployment (CI/CD)** for your React + Node.js project hosted on **cPanel**, using **GitHub Actions**.
It covers generating SSH keys, configuring cPanel, and building + deploying code automatically.

---

## 🔧 Prerequisites

Before you begin:

1. ✅ A GitHub repo structured like:

   ```
   client/  → React app
   server/  → Node.js app
   ```

2. ✅ SSH access enabled on your cPanel account.
   Ask hosting support:

   > Please enable SSH and terminal access for my cPanel user `username`.
   > We’re integrating GitHub deployment automation.

3. ✅ SSH port (ask host if unknown — e.g. `22`, `2222`, or `123123`)

4. ✅ Your cPanel username (e.g. `username`)

---

## 🔐 Generate SSH Key Pair (Local Machine)

### 1️⃣ Generate key

Run in your local terminal (Mac/Linux) or Git Bash (Windows):

```bash
ssh-keygen -t ed25519 -C "github-deploy-key"
```

If `ed25519` is unsupported, use:

```bash
ssh-keygen -t rsa -b 4096 -C "github-deploy-key"
```

When prompted:

* **File name:** `github-cpanel-key`
* **Passphrase:** press Enter (leave empty)

---

### 2️⃣ Verify files

You should see:

```
github-cpanel-key
github-cpanel-key.pub
```

---

### 3️⃣ View keys

**Public key (for cPanel):**

```bash
cat github-cpanel-key.pub
```

**Private key (for GitHub Secrets):**

```bash
cat github-cpanel-key
```

---

## 🧰 Add Keys to cPanel & GitHub

### Add public key to cPanel

1. Log in to **cPanel → SSH Access → Manage SSH Keys**
2. Click **Import Key**
3. Name: `GitHub Deploy Key`
4. Paste **public key** content
5. Click **Import Key**
6. Then **Authorize** it

---

### Add private key to GitHub Secrets

1. Go to **GitHub → Settings → Secrets and Variables → Actions**
2. Add new secret:

   * **Name:** `CPANEL_SSH_KEY`
   * **Value:** (paste private key content)
3. Save

---

## ⚙️ GitHub Actions Workflow

Create a new workflow file:
`.github/workflows/deploy.yml`

```yaml
name: Deploy React App and Server to cPanel

on:
  push:
    branches:
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Get latest code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          cd client
          npm install

      - name: Build the React app
        run: |
          cd client
          npm run build

      - name: Copy React build to server via SSH
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.CPANEL_SERVER }}
          username: ${{ secrets.CPANEL_UNAME }}
          key: ${{ secrets.CPANEL_SSH_KEY }}
          source: "client/build/**"
          target: "/home/${{ secrets.CPANEL_UNAME }}/qa.taprodevpos.com/"
          port: ${{ secrets.CPANEL_PORT }}
          strip_components: 2

      - name: Copy backend (server folder) to server via SSH
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.CPANEL_SERVER }}
          username: ${{ secrets.CPANEL_UNAME }}
          key: ${{ secrets.CPANEL_SSH_KEY }}
          source: "server/**"
          target: "/home/${{ secrets.CPANEL_SERVER }}/qa.taprodevpos.com/server/"
          port: ${{ secrets.CPANEL_PORT }}
          strip_components: 1
```

---

## 🧠 Workflow Summary

| Step                     | Description                         |
| ------------------------ | ----------------------------------- |
| **Checkout**             | Fetches latest commit from GitHub   |
| **Install Dependencies** | Installs React packages             |
| **Build React**          | Compiles production build           |
| **Upload Build**         | Deploys React app to web root       |
| **Upload Server**        | Uploads backend to `/server` folder |

---

## 🔁 Optional: Restart Node Server (PM2)

If your Node.js backend uses PM2, add this step at the end:

```yaml
- name: Restart Node server
  uses: appleboy/ssh-action@master
  with:
    host: server
    username: username
    key: ${{ secrets.CPANEL_SSH_KEY }}
    port: port
    script: |
      cd /home/username/qa.taprodevpos.com/server
      pm2 restart app || pm2 start app.js --name app
```

---

## 🚀 Deploy Automatically

Push your code to the `dev` branch:

```bash
git add .
git commit -m "Deploy new changes"
git push origin dev
```

Then go to your repo → **Actions** tab → Watch the workflow run.
Once complete:

* **Frontend:** [https://qa.taprodevpos.com](https://qa.taprodevpos.com)
* **Backend:** [https://qa.taprodevpos.com/server](https://qa.taprodevpos.com/server)

---

## 🧩 Troubleshooting

| Error                | Cause               | Fix                          |
| -------------------- | ------------------- | ---------------------------- |
| `connection refused` | SSH disabled        | Ask host to enable SSH       |
| `i/o timeout`        | Firewall blocked    | Ask host to whitelist GitHub |
| `ssh: no key found`  | Private key invalid | Re-add key to GitHub Secrets |
| `permission denied`  | Unauthorized key    | Recheck cPanel username/key  |
| Build fails          | React error         | Run `npm run build` locally  |

---

## 📂 Final Server Layout

```
/home/taprodev/qa.taprodevpos.com/
├── index.html
├── static/
├── manifest.json
└── server/
    ├── app.js
    ├── package.json
    ├── routes/
    └── ...
```

---

## ✅ Summary

You now have a **fully automated GitHub → cPanel pipeline**.

**Each push to `dev` branch will:**

1. Build the React app
2. Upload frontend files
3. Upload backend files
4. (Optionally) restart your Node.js process

No manual FTP uploads. No downtime. ✨
