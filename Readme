# üöÄ CI/CD Deployment Guide

**Project:** React (Frontend) + Node.js (Backend)
**Hosting:** cPanel Server (via SSH)
**Pipeline:** GitHub Actions
**chat link** https://chatgpt.com/share/68e7520e-6488-800d-9b76-711e9f8f230a

---

## üß© Overview

This guide explains how to set up **automatic deployment (CI/CD)** for your React + Node.js project hosted on **cPanel**, using **GitHub Actions**.
It covers generating SSH keys, configuring cPanel, and building + deploying code automatically.

---

## üîß Prerequisites

Before you begin:

1. ‚úÖ A GitHub repo structured like:

   ```
   client/  ‚Üí React app
   server/  ‚Üí Node.js app
   ```

2. ‚úÖ SSH access enabled on your cPanel account.
   Ask hosting support:

   > Please enable SSH and terminal access for my cPanel user `username`.
   > We‚Äôre integrating GitHub deployment automation.

3. ‚úÖ SSH port (ask host if unknown ‚Äî e.g. `22`, `2222`, or `123123`)

4. ‚úÖ Your cPanel username (e.g. `username`)

---

## üîê Generate SSH Key Pair (Local Machine)

### 1Ô∏è‚É£ Generate key

Run in your local terminal (Mac/Linux) or Git Bash (Windows):

```bash
ssh-keygen -t ed25519 -C "github-deploy-key"
```

If `ed25519` is unsupported, use:

```bash
ssh-keygen -t rsa -b 4096 -C "github-deploy-key"
```

When prompted:

* **File name:** `github-cpanel-key`
* **Passphrase:** press Enter (leave empty)

---

### 2Ô∏è‚É£ Verify files

You should see:

```
github-cpanel-key
github-cpanel-key.pub
```

---

### 3Ô∏è‚É£ View keys

**Public key (for cPanel):**

```bash
cat github-cpanel-key.pub
```

**Private key (for GitHub Secrets):**

```bash
cat github-cpanel-key
```

---

## üß∞ Add Keys to cPanel & GitHub

### Add public key to cPanel

1. Log in to **cPanel ‚Üí SSH Access ‚Üí Manage SSH Keys**
2. Click **Import Key**
3. Name: `GitHub Deploy Key`
4. Paste **public key** content
5. Click **Import Key**
6. Then **Authorize** it

---

### Add private key to GitHub Secrets

1. Go to **GitHub ‚Üí Settings ‚Üí Secrets and Variables ‚Üí Actions**
2. Add new secret:

   * **Name:** `CPANEL_SSH_KEY`
   * **Value:** (paste private key content)
3. Save

---

## ‚öôÔ∏è GitHub Actions Workflow

Create a new workflow file:
`.github/workflows/deploy.yml`

```yaml
name: Deploy React App and Server to cPanel

on:
  push:
    branches:
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Get latest code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          cd client
          npm install

      - name: Build the React app
        run: |
          cd client
          npm run build

      - name: Copy React build to server via SSH
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.CPANEL_SERVER }}
          username: ${{ secrets.CPANEL_UNAME }}
          key: ${{ secrets.CPANEL_SSH_KEY }}
          source: "client/build/**"
          target: "/home/${{ secrets.CPANEL_UNAME }}/qa.taprodevpos.com/"
          port: ${{ secrets.CPANEL_PORT }}
          strip_components: 2

      - name: Copy backend (server folder) to server via SSH
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.CPANEL_SERVER }}
          username: ${{ secrets.CPANEL_UNAME }}
          key: ${{ secrets.CPANEL_SSH_KEY }}
          source: "server/**"
          target: "/home/${{ secrets.CPANEL_SERVER }}/qa.taprodevpos.com/server/"
          port: ${{ secrets.CPANEL_PORT }}
          strip_components: 1
```

---

## üß† Workflow Summary

| Step                     | Description                         |
| ------------------------ | ----------------------------------- |
| **Checkout**             | Fetches latest commit from GitHub   |
| **Install Dependencies** | Installs React packages             |
| **Build React**          | Compiles production build           |
| **Upload Build**         | Deploys React app to web root       |
| **Upload Server**        | Uploads backend to `/server` folder |

---

## üîÅ Optional: Restart Node Server (PM2)

If your Node.js backend uses PM2, add this step at the end:

```yaml
- name: Restart Node server
  uses: appleboy/ssh-action@master
  with:
    host: server
    username: username
    key: ${{ secrets.CPANEL_SSH_KEY }}
    port: port
    script: |
      cd /home/username/qa.taprodevpos.com/server
      pm2 restart app || pm2 start app.js --name app
```

---

## üöÄ Deploy Automatically

Push your code to the `dev` branch:

```bash
git add .
git commit -m "Deploy new changes"
git push origin dev
```

Then go to your repo ‚Üí **Actions** tab ‚Üí Watch the workflow run.
Once complete:

* **Frontend:** [https://qa.taprodevpos.com](https://qa.taprodevpos.com)
* **Backend:** [https://qa.taprodevpos.com/server](https://qa.taprodevpos.com/server)

---

## üß© Troubleshooting

| Error                | Cause               | Fix                          |
| -------------------- | ------------------- | ---------------------------- |
| `connection refused` | SSH disabled        | Ask host to enable SSH       |
| `i/o timeout`        | Firewall blocked    | Ask host to whitelist GitHub |
| `ssh: no key found`  | Private key invalid | Re-add key to GitHub Secrets |
| `permission denied`  | Unauthorized key    | Recheck cPanel username/key  |
| Build fails          | React error         | Run `npm run build` locally  |

---

## üìÇ Final Server Layout

```
/home/taprodev/qa.taprodevpos.com/
‚îú‚îÄ‚îÄ index.html
‚îú‚îÄ‚îÄ static/
‚îú‚îÄ‚îÄ manifest.json
‚îî‚îÄ‚îÄ server/
    ‚îú‚îÄ‚îÄ app.js
    ‚îú‚îÄ‚îÄ package.json
    ‚îú‚îÄ‚îÄ routes/
    ‚îî‚îÄ‚îÄ ...
```

---

## ‚úÖ Summary

You now have a **fully automated GitHub ‚Üí cPanel pipeline**.

**Each push to `dev` branch will:**

1. Build the React app
2. Upload frontend files
3. Upload backend files
4. (Optionally) restart your Node.js process

No manual FTP uploads. No downtime. ‚ú®

==============================================================================================================================================================

# Connecting cPanel MySQL Database to HeidiSQL and Local PHP App

This guide explains how to connect your remote cPanel MySQL database to **HeidiSQL** and your **local PHP application**.

**Link :** https://chatgpt.com/share/68e7d1bc-2684-800d-b49e-69f516e1aafe
---

## üìã Prerequisites

* Access to your hosting **cPanel**
* Your **database name**, **username**, and **password**
* **HeidiSQL** installed locally
* A local PHP environment (e.g., XAMPP, Laragon, WAMP)

---

## üß≠ Step 1: Allow Remote MySQL Access

1. Log in to **cPanel**.
2. Search for **Remote MySQL**.
3. In *Add Access Host*, enter your computer‚Äôs public IP address.

   * You can find it here: [https://whatismyipaddress.com](https://whatismyipaddress.com)
4. Click **Add Host**.

> üí° If your IP changes frequently, use a free Dynamic DNS hostname (e.g. from [DuckDNS.org](https://www.duckdns.org/)) and add that instead.

---

## ‚öôÔ∏è Step 2: Find Your Database Connection Info

In **cPanel ‚Üí MySQL Databases**, note down:

* **Database name** (e.g., `username_dbname`)
* **Username**
* **Password**
* **Host name** (often shown in phpMyAdmin or ‚ÄúServer Information‚Äù ‚Äî *not* `localhost`)

Example:

```
Host: server123.hostingprovider.com
Database: taprodev_qa_trdv_lms
User: taprodev_qa_trdv_lms
Password: s&.)N}S
Port: 3306
```

---

## üíª Step 3: Connect in HeidiSQL

1. Open **HeidiSQL** ‚Üí click **New Session**.
2. Configure the session:

   * **Network type:** MySQL (TCP/IP)
   * **Hostname / IP:** your server hostname (e.g., `server123.hostingprovider.com`)
   * **User:** your MySQL username
   * **Password:** your MySQL password
   * **Port:** 3306
3. Click **Open**.

‚úÖ You should now see your remote database.

> If you get a ‚Äúnot allowed to connect‚Äù error, double-check your Remote MySQL IP settings in cPanel.

---

## üõ†Ô∏è Step 4: Connect Your Local PHP App

Update your PHP connection file to use the same database credentials.

**Example:**

```php
<?php
class Database {
    public static $connection;

    public static function setUpConnection() {
        if (!isset(Database::$connection)) {
            Database::$connection = new mysqli(
                "server123.hostingprovider.com",
                "qa_ms",                  
                "s&.)N}S",                      
                "qa_lms",                  
                3306                            
            );

            if (Database::$connection->connect_error) {
                die("Connection failed: " . Database::$connection->connect_error);
            }
        }
    }
}
?>
```

Test the connection locally:

```php
<?php
require_once 'Database.php';
Database::setUpConnection();
echo "Connected successfully!";
?>
```

---

## üîí Optional: Use SSH Tunnel (More Secure)

If your hosting provider blocks direct MySQL connections, use HeidiSQL‚Äôs **SSH Tunnel** feature:

1. In HeidiSQL ‚Üí Session ‚Üí *SSH Tunnel* tab.
2. Enable **Use SSH tunnel**.
3. Fill in:

   * **SSH host:** yourdomain.com
   * **SSH user:** your cPanel username
   * **Port:** 22
   * **Password or Private Key:** your SSH credentials
4. Keep ‚ÄúMySQL host‚Äù as `127.0.0.1` and port `3306`.

---

## ‚úÖ Summary

| Tool     | Purpose                       | Connects to                          |
| -------- | ----------------------------- | ------------------------------------ |
| HeidiSQL | Database management GUI       | Remote cPanel MySQL database         |
| PHP App  | Application logic and backend | Same remote MySQL via `Database.php` |

---

### üß© Notes

* Always use secure credentials and HTTPS for production.
* Avoid hard-coding passwords in public repositories.
* Backup your database regularly.

---

**Author:** Your Name
**Last Updated:** October 2025


=======================================================================

**BACKEND**

# Install following composors
composer require vlucas/phpdotenv
composer require phpmailer/phpmailer
composer require twig/twig



=======================================================================

**API**

Link : \https://grey-trinity-393827.postman.co/workspace/My-Workspace~56ed7c61-e132-4a60-823b-60462695df1c/collection/25049258-94b6c069-e4b0-4a45-9e48-2df3dc29fcc6?action=share&source=copy-link&creator=25049258